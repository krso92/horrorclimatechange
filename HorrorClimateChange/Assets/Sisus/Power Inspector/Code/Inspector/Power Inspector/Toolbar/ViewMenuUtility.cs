namespace Sisus
{
	public static class ViewMenuUtility
	{
		/// <summary>
		/// Adds preview-area related items to opening view menu.
		/// </summary>
		/// <param name="menu">
		/// [in,out] The menu. </param>
		public static void AddPreviewAreaItems(ref Menu menu)
		{
			menu.AddSeparatorIfNotRedundant();

			menu.Add("Preview Area/Minimized", ()=> UserSettings.ShowPreviewArea = ShowPreviewArea.Minimized, UserSettings.ShowPreviewArea == ShowPreviewArea.Minimized);
			menu.Add("Preview Area/Dynamic", () => UserSettings.ShowPreviewArea = ShowPreviewArea.Dynamic, UserSettings.ShowPreviewArea == ShowPreviewArea.Dynamic);
			menu.Add("Preview Area/Manual", () => UserSettings.ShowPreviewArea = ShowPreviewArea.Manual, UserSettings.ShowPreviewArea == ShowPreviewArea.Manual);
		}

		/// <summary>
		/// Adds the items to opening view menu.
		/// </summary>
		/// <param name="menu">
		/// [in,out] The menu. </param>
		/// <param name="inspector"> The inspector for which the menu is opening. </param>
		/// <param name="addScriptFieldItem"> Should we add item for script field visibility? </param>
		public static void AddFieldVisibilityItems(ref Menu menu, IInspector inspector, bool addScriptFieldItem)
		{
			menu.AddSeparatorIfNotRedundant();
			
			var settings = inspector.Preferences;

			if(addScriptFieldItem)
			{
				menu.Add("Script Field/Hide", () => { settings.drawScriptReferenceFields = false; inspector.ForceRebuildDrawers(); }, !settings.drawScriptReferenceFields);
				menu.Add("Script Field/Show", () => { settings.drawScriptReferenceFields = true; inspector.ForceRebuildDrawers(); }, settings.drawScriptReferenceFields);
			}

			menu.Add("Field Visibility/Serialized Only", "Only display fields that Unity can serialize by default. Attributes such as EditorBrowsable can still be used to expose any fields individually.", ()=>{ settings.showNonSerializedFields = true; inspector.ForceRebuildDrawers(); }, !settings.showNonSerializedFields);
			menu.Add("Field Visibility/All Public", "Display all public fields even if Unity can't serialize them by default. Attributes such as HideInInspector can still be used to hide any fields individually.", ()=>{ settings.showNonSerializedFields = false; inspector.ForceRebuildDrawers(); }, settings.showNonSerializedFields);
			
			menu.Add("Property Visibility/Attribute-Exposed Only", "Only show properties explicitly exposed with Attributes like EditorBrowsable, Browsable(true), SerializeField or ShowInInspector", () => { settings.showProperties = PropertyVisibility.AttributeExposedOnly; inspector.ForceRebuildDrawers(); }, true);
			menu.Add("Property Visibility/Auto-Generated Public", "All public auto-generated properties will also be shown, unless explicitly hidden with Attributes like HideInInspector or NonSerialized. All other properties can also explicitly be marked to be shown with Attributes like EditorBrowsable, Browsable(true), SerializeField or ShowInInspector.", () => { settings.showProperties = PropertyVisibility.PublicAutoGenerated; inspector.ForceRebuildDrawers(); }, settings.showProperties != PropertyVisibility.AttributeExposedOnly);
			menu.Add("Property Visibility/All Public", "All public properties will be shown by default, unless explicitly hidden with Attributes like HideInInspector or NonSerialized.", () => { settings.showProperties = PropertyVisibility.AllPublic; inspector.ForceRebuildDrawers(); }, settings.showProperties == PropertyVisibility.AllPublic);

			menu.Add("Method Visibility/Attribute-Exposed Only", "Only show methods explicitly exposed with Attributes like EditorBrowsable, Browsable(true), SerializeField or ShowInInspector", ()=>{ settings.showMethods = MethodVisibility.AttributeExposedOnly; inspector.ForceRebuildDrawers(); }, settings.showMethods == MethodVisibility.AttributeExposedOnly);
			menu.Add("Method Visibility/Context Menu", "All methods that have the ContextMenu attribute will also be shown, unless explicitly hidden with Attributes like HideInInspector. All other methods can also explicitly be marked to be shown with Attributes like EditorBrowsable, Browsable(true), or ShowInInspector.", ()=>{ settings.showMethods = MethodVisibility.ContextMenu; inspector.ForceRebuildDrawers(); }, settings.showMethods == MethodVisibility.ContextMenu);
			menu.Add("Method Visibility/All Public", "All public methods will be shown by default, unless explicitly hidden with Attributes like HideInInspector.", () => { settings.showMethods = MethodVisibility.AllPublic; inspector.ForceRebuildDrawers(); }, settings.showMethods == MethodVisibility.AllPublic);
		}
	}
}